// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"goapp/internal/app/dao_postgre/model"
)

func newDevable(db *gorm.DB, opts ...gen.DOOption) devable {
	_devable := devable{}

	_devable.devableDo.UseDB(db, opts...)
	_devable.devableDo.UseModel(&model.Devable{})

	tableName := _devable.devableDo.TableName()
	_devable.ALL = field.NewAsterisk(tableName)
	_devable.ID = field.NewField(tableName, "id")
	_devable.Name = field.NewString(tableName, "name")

	_devable.fillFieldMap()

	return _devable
}

type devable struct {
	devableDo

	ALL  field.Asterisk
	ID   field.Field
	Name field.String

	fieldMap map[string]field.Expr
}

func (d devable) Table(newTableName string) *devable {
	d.devableDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d devable) As(alias string) *devable {
	d.devableDo.DO = *(d.devableDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *devable) updateTableName(table string) *devable {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewField(table, "id")
	d.Name = field.NewString(table, "name")

	d.fillFieldMap()

	return d
}

func (d *devable) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *devable) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 2)
	d.fieldMap["id"] = d.ID
	d.fieldMap["name"] = d.Name
}

func (d devable) clone(db *gorm.DB) devable {
	d.devableDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d devable) replaceDB(db *gorm.DB) devable {
	d.devableDo.ReplaceDB(db)
	return d
}

type devableDo struct{ gen.DO }

type IDevableDo interface {
	gen.SubQuery
	Debug() IDevableDo
	WithContext(ctx context.Context) IDevableDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDevableDo
	WriteDB() IDevableDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDevableDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDevableDo
	Not(conds ...gen.Condition) IDevableDo
	Or(conds ...gen.Condition) IDevableDo
	Select(conds ...field.Expr) IDevableDo
	Where(conds ...gen.Condition) IDevableDo
	Order(conds ...field.Expr) IDevableDo
	Distinct(cols ...field.Expr) IDevableDo
	Omit(cols ...field.Expr) IDevableDo
	Join(table schema.Tabler, on ...field.Expr) IDevableDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDevableDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDevableDo
	Group(cols ...field.Expr) IDevableDo
	Having(conds ...gen.Condition) IDevableDo
	Limit(limit int) IDevableDo
	Offset(offset int) IDevableDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDevableDo
	Unscoped() IDevableDo
	Create(values ...*model.Devable) error
	CreateInBatches(values []*model.Devable, batchSize int) error
	Save(values ...*model.Devable) error
	First() (*model.Devable, error)
	Take() (*model.Devable, error)
	Last() (*model.Devable, error)
	Find() ([]*model.Devable, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Devable, err error)
	FindInBatches(result *[]*model.Devable, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Devable) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDevableDo
	Assign(attrs ...field.AssignExpr) IDevableDo
	Joins(fields ...field.RelationField) IDevableDo
	Preload(fields ...field.RelationField) IDevableDo
	FirstOrInit() (*model.Devable, error)
	FirstOrCreate() (*model.Devable, error)
	FindByPage(offset int, limit int) (result []*model.Devable, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDevableDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d devableDo) Debug() IDevableDo {
	return d.withDO(d.DO.Debug())
}

func (d devableDo) WithContext(ctx context.Context) IDevableDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d devableDo) ReadDB() IDevableDo {
	return d.Clauses(dbresolver.Read)
}

func (d devableDo) WriteDB() IDevableDo {
	return d.Clauses(dbresolver.Write)
}

func (d devableDo) Session(config *gorm.Session) IDevableDo {
	return d.withDO(d.DO.Session(config))
}

func (d devableDo) Clauses(conds ...clause.Expression) IDevableDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d devableDo) Returning(value interface{}, columns ...string) IDevableDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d devableDo) Not(conds ...gen.Condition) IDevableDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d devableDo) Or(conds ...gen.Condition) IDevableDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d devableDo) Select(conds ...field.Expr) IDevableDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d devableDo) Where(conds ...gen.Condition) IDevableDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d devableDo) Order(conds ...field.Expr) IDevableDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d devableDo) Distinct(cols ...field.Expr) IDevableDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d devableDo) Omit(cols ...field.Expr) IDevableDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d devableDo) Join(table schema.Tabler, on ...field.Expr) IDevableDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d devableDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDevableDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d devableDo) RightJoin(table schema.Tabler, on ...field.Expr) IDevableDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d devableDo) Group(cols ...field.Expr) IDevableDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d devableDo) Having(conds ...gen.Condition) IDevableDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d devableDo) Limit(limit int) IDevableDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d devableDo) Offset(offset int) IDevableDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d devableDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDevableDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d devableDo) Unscoped() IDevableDo {
	return d.withDO(d.DO.Unscoped())
}

func (d devableDo) Create(values ...*model.Devable) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d devableDo) CreateInBatches(values []*model.Devable, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d devableDo) Save(values ...*model.Devable) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d devableDo) First() (*model.Devable, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Devable), nil
	}
}

func (d devableDo) Take() (*model.Devable, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Devable), nil
	}
}

func (d devableDo) Last() (*model.Devable, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Devable), nil
	}
}

func (d devableDo) Find() ([]*model.Devable, error) {
	result, err := d.DO.Find()
	return result.([]*model.Devable), err
}

func (d devableDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Devable, err error) {
	buf := make([]*model.Devable, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d devableDo) FindInBatches(result *[]*model.Devable, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d devableDo) Attrs(attrs ...field.AssignExpr) IDevableDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d devableDo) Assign(attrs ...field.AssignExpr) IDevableDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d devableDo) Joins(fields ...field.RelationField) IDevableDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d devableDo) Preload(fields ...field.RelationField) IDevableDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d devableDo) FirstOrInit() (*model.Devable, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Devable), nil
	}
}

func (d devableDo) FirstOrCreate() (*model.Devable, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Devable), nil
	}
}

func (d devableDo) FindByPage(offset int, limit int) (result []*model.Devable, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d devableDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d devableDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d devableDo) Delete(models ...*model.Devable) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *devableDo) withDO(do gen.Dao) *devableDo {
	d.DO = *do.(*gen.DO)
	return d
}
