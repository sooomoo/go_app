// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"goapp/internal/app/repositories/dao/model"
)

func newUserToken(db *gorm.DB, opts ...gen.DOOption) userToken {
	_userToken := userToken{}

	_userToken.userTokenDo.UseDB(db, opts...)
	_userToken.userTokenDo.UseModel(&model.UserToken{})

	tableName := _userToken.userTokenDo.TableName()
	_userToken.ALL = field.NewAsterisk(tableName)
	_userToken.UserID = field.NewInt64(tableName, "user_id")
	_userToken.Platform = field.NewInt32(tableName, "platform")
	_userToken.Type = field.NewInt32(tableName, "type")
	_userToken.Token = field.NewString(tableName, "token")
	_userToken.IP = field.NewString(tableName, "ip")
	_userToken.CreatedAt = field.NewInt64(tableName, "created_at")
	_userToken.ExpireAt = field.NewInt64(tableName, "expire_at")

	_userToken.fillFieldMap()

	return _userToken
}

type userToken struct {
	userTokenDo userTokenDo

	ALL       field.Asterisk
	UserID    field.Int64
	Platform  field.Int32
	Type      field.Int32
	Token     field.String
	IP        field.String
	CreatedAt field.Int64
	ExpireAt  field.Int64

	fieldMap map[string]field.Expr
}

func (u userToken) Table(newTableName string) *userToken {
	u.userTokenDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userToken) As(alias string) *userToken {
	u.userTokenDo.DO = *(u.userTokenDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userToken) updateTableName(table string) *userToken {
	u.ALL = field.NewAsterisk(table)
	u.UserID = field.NewInt64(table, "user_id")
	u.Platform = field.NewInt32(table, "platform")
	u.Type = field.NewInt32(table, "type")
	u.Token = field.NewString(table, "token")
	u.IP = field.NewString(table, "ip")
	u.CreatedAt = field.NewInt64(table, "created_at")
	u.ExpireAt = field.NewInt64(table, "expire_at")

	u.fillFieldMap()

	return u
}

func (u *userToken) WithContext(ctx context.Context) *userTokenDo {
	return u.userTokenDo.WithContext(ctx)
}

func (u userToken) TableName() string { return u.userTokenDo.TableName() }

func (u userToken) Alias() string { return u.userTokenDo.Alias() }

func (u userToken) Columns(cols ...field.Expr) gen.Columns { return u.userTokenDo.Columns(cols...) }

func (u *userToken) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userToken) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 7)
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["platform"] = u.Platform
	u.fieldMap["type"] = u.Type
	u.fieldMap["token"] = u.Token
	u.fieldMap["ip"] = u.IP
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["expire_at"] = u.ExpireAt
}

func (u userToken) clone(db *gorm.DB) userToken {
	u.userTokenDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userToken) replaceDB(db *gorm.DB) userToken {
	u.userTokenDo.ReplaceDB(db)
	return u
}

type userTokenDo struct{ gen.DO }

func (u userTokenDo) Debug() *userTokenDo {
	return u.withDO(u.DO.Debug())
}

func (u userTokenDo) WithContext(ctx context.Context) *userTokenDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userTokenDo) ReadDB() *userTokenDo {
	return u.Clauses(dbresolver.Read)
}

func (u userTokenDo) WriteDB() *userTokenDo {
	return u.Clauses(dbresolver.Write)
}

func (u userTokenDo) Session(config *gorm.Session) *userTokenDo {
	return u.withDO(u.DO.Session(config))
}

func (u userTokenDo) Clauses(conds ...clause.Expression) *userTokenDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userTokenDo) Returning(value interface{}, columns ...string) *userTokenDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userTokenDo) Not(conds ...gen.Condition) *userTokenDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userTokenDo) Or(conds ...gen.Condition) *userTokenDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userTokenDo) Select(conds ...field.Expr) *userTokenDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userTokenDo) Where(conds ...gen.Condition) *userTokenDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userTokenDo) Order(conds ...field.Expr) *userTokenDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userTokenDo) Distinct(cols ...field.Expr) *userTokenDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userTokenDo) Omit(cols ...field.Expr) *userTokenDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userTokenDo) Join(table schema.Tabler, on ...field.Expr) *userTokenDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userTokenDo) LeftJoin(table schema.Tabler, on ...field.Expr) *userTokenDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userTokenDo) RightJoin(table schema.Tabler, on ...field.Expr) *userTokenDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userTokenDo) Group(cols ...field.Expr) *userTokenDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userTokenDo) Having(conds ...gen.Condition) *userTokenDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userTokenDo) Limit(limit int) *userTokenDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userTokenDo) Offset(offset int) *userTokenDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userTokenDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *userTokenDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userTokenDo) Unscoped() *userTokenDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userTokenDo) Create(values ...*model.UserToken) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userTokenDo) CreateInBatches(values []*model.UserToken, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userTokenDo) Save(values ...*model.UserToken) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userTokenDo) First() (*model.UserToken, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserToken), nil
	}
}

func (u userTokenDo) Take() (*model.UserToken, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserToken), nil
	}
}

func (u userTokenDo) Last() (*model.UserToken, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserToken), nil
	}
}

func (u userTokenDo) Find() ([]*model.UserToken, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserToken), err
}

func (u userTokenDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserToken, err error) {
	buf := make([]*model.UserToken, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userTokenDo) FindInBatches(result *[]*model.UserToken, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userTokenDo) Attrs(attrs ...field.AssignExpr) *userTokenDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userTokenDo) Assign(attrs ...field.AssignExpr) *userTokenDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userTokenDo) Joins(fields ...field.RelationField) *userTokenDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userTokenDo) Preload(fields ...field.RelationField) *userTokenDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userTokenDo) FirstOrInit() (*model.UserToken, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserToken), nil
	}
}

func (u userTokenDo) FirstOrCreate() (*model.UserToken, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserToken), nil
	}
}

func (u userTokenDo) FindByPage(offset int, limit int) (result []*model.UserToken, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userTokenDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userTokenDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userTokenDo) Delete(models ...*model.UserToken) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userTokenDo) withDO(do gen.Dao) *userTokenDo {
	u.DO = *do.(*gen.DO)
	return u
}
