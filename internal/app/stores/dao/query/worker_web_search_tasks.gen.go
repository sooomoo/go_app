// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"goapp/internal/app/stores/dao/model"
)

func newWorkerWebSearchTask(db *gorm.DB, opts ...gen.DOOption) workerWebSearchTask {
	_workerWebSearchTask := workerWebSearchTask{}

	_workerWebSearchTask.workerWebSearchTaskDo.UseDB(db, opts...)
	_workerWebSearchTask.workerWebSearchTaskDo.UseModel(&model.WorkerWebSearchTask{})

	tableName := _workerWebSearchTask.workerWebSearchTaskDo.TableName()
	_workerWebSearchTask.ALL = field.NewAsterisk(tableName)
	_workerWebSearchTask.ID = field.NewInt64(tableName, "id")
	_workerWebSearchTask.Keywords = field.NewString(tableName, "keywords")
	_workerWebSearchTask.CreateAt = field.NewInt64(tableName, "create_at")

	_workerWebSearchTask.fillFieldMap()

	return _workerWebSearchTask
}

// workerWebSearchTask 搜索任务
type workerWebSearchTask struct {
	workerWebSearchTaskDo

	ALL      field.Asterisk
	ID       field.Int64
	Keywords field.String // 搜索词
	CreateAt field.Int64

	fieldMap map[string]field.Expr
}

func (w workerWebSearchTask) Table(newTableName string) *workerWebSearchTask {
	w.workerWebSearchTaskDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w workerWebSearchTask) As(alias string) *workerWebSearchTask {
	w.workerWebSearchTaskDo.DO = *(w.workerWebSearchTaskDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *workerWebSearchTask) updateTableName(table string) *workerWebSearchTask {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.Keywords = field.NewString(table, "keywords")
	w.CreateAt = field.NewInt64(table, "create_at")

	w.fillFieldMap()

	return w
}

func (w *workerWebSearchTask) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *workerWebSearchTask) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 3)
	w.fieldMap["id"] = w.ID
	w.fieldMap["keywords"] = w.Keywords
	w.fieldMap["create_at"] = w.CreateAt
}

func (w workerWebSearchTask) clone(db *gorm.DB) workerWebSearchTask {
	w.workerWebSearchTaskDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w workerWebSearchTask) replaceDB(db *gorm.DB) workerWebSearchTask {
	w.workerWebSearchTaskDo.ReplaceDB(db)
	return w
}

type workerWebSearchTaskDo struct{ gen.DO }

type IWorkerWebSearchTaskDo interface {
	gen.SubQuery
	Debug() IWorkerWebSearchTaskDo
	WithContext(ctx context.Context) IWorkerWebSearchTaskDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWorkerWebSearchTaskDo
	WriteDB() IWorkerWebSearchTaskDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWorkerWebSearchTaskDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWorkerWebSearchTaskDo
	Not(conds ...gen.Condition) IWorkerWebSearchTaskDo
	Or(conds ...gen.Condition) IWorkerWebSearchTaskDo
	Select(conds ...field.Expr) IWorkerWebSearchTaskDo
	Where(conds ...gen.Condition) IWorkerWebSearchTaskDo
	Order(conds ...field.Expr) IWorkerWebSearchTaskDo
	Distinct(cols ...field.Expr) IWorkerWebSearchTaskDo
	Omit(cols ...field.Expr) IWorkerWebSearchTaskDo
	Join(table schema.Tabler, on ...field.Expr) IWorkerWebSearchTaskDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWorkerWebSearchTaskDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWorkerWebSearchTaskDo
	Group(cols ...field.Expr) IWorkerWebSearchTaskDo
	Having(conds ...gen.Condition) IWorkerWebSearchTaskDo
	Limit(limit int) IWorkerWebSearchTaskDo
	Offset(offset int) IWorkerWebSearchTaskDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWorkerWebSearchTaskDo
	Unscoped() IWorkerWebSearchTaskDo
	Create(values ...*model.WorkerWebSearchTask) error
	CreateInBatches(values []*model.WorkerWebSearchTask, batchSize int) error
	Save(values ...*model.WorkerWebSearchTask) error
	First() (*model.WorkerWebSearchTask, error)
	Take() (*model.WorkerWebSearchTask, error)
	Last() (*model.WorkerWebSearchTask, error)
	Find() ([]*model.WorkerWebSearchTask, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WorkerWebSearchTask, err error)
	FindInBatches(result *[]*model.WorkerWebSearchTask, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WorkerWebSearchTask) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWorkerWebSearchTaskDo
	Assign(attrs ...field.AssignExpr) IWorkerWebSearchTaskDo
	Joins(fields ...field.RelationField) IWorkerWebSearchTaskDo
	Preload(fields ...field.RelationField) IWorkerWebSearchTaskDo
	FirstOrInit() (*model.WorkerWebSearchTask, error)
	FirstOrCreate() (*model.WorkerWebSearchTask, error)
	FindByPage(offset int, limit int) (result []*model.WorkerWebSearchTask, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWorkerWebSearchTaskDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w workerWebSearchTaskDo) Debug() IWorkerWebSearchTaskDo {
	return w.withDO(w.DO.Debug())
}

func (w workerWebSearchTaskDo) WithContext(ctx context.Context) IWorkerWebSearchTaskDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w workerWebSearchTaskDo) ReadDB() IWorkerWebSearchTaskDo {
	return w.Clauses(dbresolver.Read)
}

func (w workerWebSearchTaskDo) WriteDB() IWorkerWebSearchTaskDo {
	return w.Clauses(dbresolver.Write)
}

func (w workerWebSearchTaskDo) Session(config *gorm.Session) IWorkerWebSearchTaskDo {
	return w.withDO(w.DO.Session(config))
}

func (w workerWebSearchTaskDo) Clauses(conds ...clause.Expression) IWorkerWebSearchTaskDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w workerWebSearchTaskDo) Returning(value interface{}, columns ...string) IWorkerWebSearchTaskDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w workerWebSearchTaskDo) Not(conds ...gen.Condition) IWorkerWebSearchTaskDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w workerWebSearchTaskDo) Or(conds ...gen.Condition) IWorkerWebSearchTaskDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w workerWebSearchTaskDo) Select(conds ...field.Expr) IWorkerWebSearchTaskDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w workerWebSearchTaskDo) Where(conds ...gen.Condition) IWorkerWebSearchTaskDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w workerWebSearchTaskDo) Order(conds ...field.Expr) IWorkerWebSearchTaskDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w workerWebSearchTaskDo) Distinct(cols ...field.Expr) IWorkerWebSearchTaskDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w workerWebSearchTaskDo) Omit(cols ...field.Expr) IWorkerWebSearchTaskDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w workerWebSearchTaskDo) Join(table schema.Tabler, on ...field.Expr) IWorkerWebSearchTaskDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w workerWebSearchTaskDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWorkerWebSearchTaskDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w workerWebSearchTaskDo) RightJoin(table schema.Tabler, on ...field.Expr) IWorkerWebSearchTaskDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w workerWebSearchTaskDo) Group(cols ...field.Expr) IWorkerWebSearchTaskDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w workerWebSearchTaskDo) Having(conds ...gen.Condition) IWorkerWebSearchTaskDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w workerWebSearchTaskDo) Limit(limit int) IWorkerWebSearchTaskDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w workerWebSearchTaskDo) Offset(offset int) IWorkerWebSearchTaskDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w workerWebSearchTaskDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWorkerWebSearchTaskDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w workerWebSearchTaskDo) Unscoped() IWorkerWebSearchTaskDo {
	return w.withDO(w.DO.Unscoped())
}

func (w workerWebSearchTaskDo) Create(values ...*model.WorkerWebSearchTask) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w workerWebSearchTaskDo) CreateInBatches(values []*model.WorkerWebSearchTask, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w workerWebSearchTaskDo) Save(values ...*model.WorkerWebSearchTask) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w workerWebSearchTaskDo) First() (*model.WorkerWebSearchTask, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WorkerWebSearchTask), nil
	}
}

func (w workerWebSearchTaskDo) Take() (*model.WorkerWebSearchTask, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WorkerWebSearchTask), nil
	}
}

func (w workerWebSearchTaskDo) Last() (*model.WorkerWebSearchTask, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WorkerWebSearchTask), nil
	}
}

func (w workerWebSearchTaskDo) Find() ([]*model.WorkerWebSearchTask, error) {
	result, err := w.DO.Find()
	return result.([]*model.WorkerWebSearchTask), err
}

func (w workerWebSearchTaskDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WorkerWebSearchTask, err error) {
	buf := make([]*model.WorkerWebSearchTask, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w workerWebSearchTaskDo) FindInBatches(result *[]*model.WorkerWebSearchTask, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w workerWebSearchTaskDo) Attrs(attrs ...field.AssignExpr) IWorkerWebSearchTaskDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w workerWebSearchTaskDo) Assign(attrs ...field.AssignExpr) IWorkerWebSearchTaskDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w workerWebSearchTaskDo) Joins(fields ...field.RelationField) IWorkerWebSearchTaskDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w workerWebSearchTaskDo) Preload(fields ...field.RelationField) IWorkerWebSearchTaskDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w workerWebSearchTaskDo) FirstOrInit() (*model.WorkerWebSearchTask, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WorkerWebSearchTask), nil
	}
}

func (w workerWebSearchTaskDo) FirstOrCreate() (*model.WorkerWebSearchTask, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WorkerWebSearchTask), nil
	}
}

func (w workerWebSearchTaskDo) FindByPage(offset int, limit int) (result []*model.WorkerWebSearchTask, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w workerWebSearchTaskDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w workerWebSearchTaskDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w workerWebSearchTaskDo) Delete(models ...*model.WorkerWebSearchTask) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *workerWebSearchTaskDo) withDO(do gen.Dao) *workerWebSearchTaskDo {
	w.DO = *do.(*gen.DO)
	return w
}
