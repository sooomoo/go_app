// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"goapp/internal/app/dao/model"
)

func newUserIP(db *gorm.DB, opts ...gen.DOOption) userIP {
	_userIP := userIP{}

	_userIP.userIPDo.UseDB(db, opts...)
	_userIP.userIPDo.UseModel(&model.UserIP{})

	tableName := _userIP.userIPDo.TableName()
	_userIP.ALL = field.NewAsterisk(tableName)
	_userIP.ID = field.NewField(tableName, "id")
	_userIP.Register = field.NewString(tableName, "register")
	_userIP.Latest = field.NewString(tableName, "latest")
	_userIP.CreatedAt = field.NewInt64(tableName, "created_at")
	_userIP.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_userIP.fillFieldMap()

	return _userIP
}

type userIP struct {
	userIPDo

	ALL       field.Asterisk
	ID        field.Field
	Register  field.String
	Latest    field.String
	CreatedAt field.Int64
	UpdatedAt field.Int64

	fieldMap map[string]field.Expr
}

func (u userIP) Table(newTableName string) *userIP {
	u.userIPDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userIP) As(alias string) *userIP {
	u.userIPDo.DO = *(u.userIPDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userIP) updateTableName(table string) *userIP {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewField(table, "id")
	u.Register = field.NewString(table, "register")
	u.Latest = field.NewString(table, "latest")
	u.CreatedAt = field.NewInt64(table, "created_at")
	u.UpdatedAt = field.NewInt64(table, "updated_at")

	u.fillFieldMap()

	return u
}

func (u *userIP) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userIP) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 5)
	u.fieldMap["id"] = u.ID
	u.fieldMap["register"] = u.Register
	u.fieldMap["latest"] = u.Latest
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
}

func (u userIP) clone(db *gorm.DB) userIP {
	u.userIPDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userIP) replaceDB(db *gorm.DB) userIP {
	u.userIPDo.ReplaceDB(db)
	return u
}

type userIPDo struct{ gen.DO }

type IUserIPDo interface {
	gen.SubQuery
	Debug() IUserIPDo
	WithContext(ctx context.Context) IUserIPDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserIPDo
	WriteDB() IUserIPDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserIPDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserIPDo
	Not(conds ...gen.Condition) IUserIPDo
	Or(conds ...gen.Condition) IUserIPDo
	Select(conds ...field.Expr) IUserIPDo
	Where(conds ...gen.Condition) IUserIPDo
	Order(conds ...field.Expr) IUserIPDo
	Distinct(cols ...field.Expr) IUserIPDo
	Omit(cols ...field.Expr) IUserIPDo
	Join(table schema.Tabler, on ...field.Expr) IUserIPDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserIPDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserIPDo
	Group(cols ...field.Expr) IUserIPDo
	Having(conds ...gen.Condition) IUserIPDo
	Limit(limit int) IUserIPDo
	Offset(offset int) IUserIPDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserIPDo
	Unscoped() IUserIPDo
	Create(values ...*model.UserIP) error
	CreateInBatches(values []*model.UserIP, batchSize int) error
	Save(values ...*model.UserIP) error
	First() (*model.UserIP, error)
	Take() (*model.UserIP, error)
	Last() (*model.UserIP, error)
	Find() ([]*model.UserIP, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserIP, err error)
	FindInBatches(result *[]*model.UserIP, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserIP) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserIPDo
	Assign(attrs ...field.AssignExpr) IUserIPDo
	Joins(fields ...field.RelationField) IUserIPDo
	Preload(fields ...field.RelationField) IUserIPDo
	FirstOrInit() (*model.UserIP, error)
	FirstOrCreate() (*model.UserIP, error)
	FindByPage(offset int, limit int) (result []*model.UserIP, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserIPDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userIPDo) Debug() IUserIPDo {
	return u.withDO(u.DO.Debug())
}

func (u userIPDo) WithContext(ctx context.Context) IUserIPDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userIPDo) ReadDB() IUserIPDo {
	return u.Clauses(dbresolver.Read)
}

func (u userIPDo) WriteDB() IUserIPDo {
	return u.Clauses(dbresolver.Write)
}

func (u userIPDo) Session(config *gorm.Session) IUserIPDo {
	return u.withDO(u.DO.Session(config))
}

func (u userIPDo) Clauses(conds ...clause.Expression) IUserIPDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userIPDo) Returning(value interface{}, columns ...string) IUserIPDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userIPDo) Not(conds ...gen.Condition) IUserIPDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userIPDo) Or(conds ...gen.Condition) IUserIPDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userIPDo) Select(conds ...field.Expr) IUserIPDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userIPDo) Where(conds ...gen.Condition) IUserIPDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userIPDo) Order(conds ...field.Expr) IUserIPDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userIPDo) Distinct(cols ...field.Expr) IUserIPDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userIPDo) Omit(cols ...field.Expr) IUserIPDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userIPDo) Join(table schema.Tabler, on ...field.Expr) IUserIPDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userIPDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserIPDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userIPDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserIPDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userIPDo) Group(cols ...field.Expr) IUserIPDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userIPDo) Having(conds ...gen.Condition) IUserIPDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userIPDo) Limit(limit int) IUserIPDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userIPDo) Offset(offset int) IUserIPDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userIPDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserIPDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userIPDo) Unscoped() IUserIPDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userIPDo) Create(values ...*model.UserIP) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userIPDo) CreateInBatches(values []*model.UserIP, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userIPDo) Save(values ...*model.UserIP) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userIPDo) First() (*model.UserIP, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserIP), nil
	}
}

func (u userIPDo) Take() (*model.UserIP, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserIP), nil
	}
}

func (u userIPDo) Last() (*model.UserIP, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserIP), nil
	}
}

func (u userIPDo) Find() ([]*model.UserIP, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserIP), err
}

func (u userIPDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserIP, err error) {
	buf := make([]*model.UserIP, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userIPDo) FindInBatches(result *[]*model.UserIP, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userIPDo) Attrs(attrs ...field.AssignExpr) IUserIPDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userIPDo) Assign(attrs ...field.AssignExpr) IUserIPDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userIPDo) Joins(fields ...field.RelationField) IUserIPDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userIPDo) Preload(fields ...field.RelationField) IUserIPDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userIPDo) FirstOrInit() (*model.UserIP, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserIP), nil
	}
}

func (u userIPDo) FirstOrCreate() (*model.UserIP, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserIP), nil
	}
}

func (u userIPDo) FindByPage(offset int, limit int) (result []*model.UserIP, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userIPDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userIPDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userIPDo) Delete(models ...*model.UserIP) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userIPDo) withDO(do gen.Dao) *userIPDo {
	u.DO = *do.(*gen.DO)
	return u
}
